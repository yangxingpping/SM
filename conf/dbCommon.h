// generated by ./ddl2cpp ./dbCommon.sql dbCommon dbCommon
#ifndef DBCOMMON_DBCOMMON_H
#define DBCOMMON_DBCOMMON_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace dbCommon
{
  namespace Users_
  {
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Passwd
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "passwd";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T passwd;
            T& operator()() { return passwd; }
            const T& operator()() const { return passwd; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Phone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phone;
            T& operator()() { return phone; }
            const T& operator()() const { return phone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Expiredate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "expiredate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T expiredate;
            T& operator()() { return expiredate; }
            const T& operator()() const { return expiredate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
  } // namespace Users_

  struct Users: sqlpp::table_t<Users,
               Users_::Name,
               Users_::Passwd,
               Users_::Phone,
               Users_::Expiredate>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "users";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T users;
        T& operator()() { return users; }
        const T& operator()() const { return users; }
      };
    };
  };
  namespace Token_
  {
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Token
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "token";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T token;
            T& operator()() { return token; }
            const T& operator()() const { return token; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace Token_

  struct Token: sqlpp::table_t<Token,
               Token_::Name,
               Token_::Token>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "token";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T token;
        T& operator()() { return token; }
        const T& operator()() const { return token; }
      };
    };
  };
  namespace Sysadmin_
  {
    struct User
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T user;
            T& operator()() { return user; }
            const T& operator()() const { return user; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Phone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phone;
            T& operator()() { return phone; }
            const T& operator()() const { return phone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Admin
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "admin";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T admin;
            T& operator()() { return admin; }
            const T& operator()() const { return admin; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Role
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "role";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T role;
            T& operator()() { return role; }
            const T& operator()() const { return role; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Sysadmin_

  struct Sysadmin: sqlpp::table_t<Sysadmin,
               Sysadmin_::User,
               Sysadmin_::Phone,
               Sysadmin_::Admin,
               Sysadmin_::Role>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "sysadmin";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T sysadmin;
        T& operator()() { return sysadmin; }
        const T& operator()() const { return sysadmin; }
      };
    };
  };
} // namespace dbCommon
#endif
