// generated by ./ddl2cpp ./rest.sql weixin orm
#ifndef ORM_WEIXIN_H
#define ORM_WEIXIN_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace orm
{
  namespace Admin_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct UserName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "userName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userName;
            T& operator()() { return userName; }
            const T& operator()() const { return userName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Password
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "password";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T password;
            T& operator()() { return password; }
            const T& operator()() const { return password; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct LastLoginTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "last_login_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastLoginTime;
            T& operator()() { return lastLoginTime; }
            const T& operator()() const { return lastLoginTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct Role
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "role";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T role;
            T& operator()() { return role; }
            const T& operator()() const { return role; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace Admin_

  struct Admin: sqlpp::table_t<Admin,
               Admin_::Id,
               Admin_::UserName,
               Admin_::Password,
               Admin_::LastLoginTime,
               Admin_::Role>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "admin";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T admin;
        T& operator()() { return admin; }
        const T& operator()() const { return admin; }
      };
    };
  };
  namespace Appoint_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct UserName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "userName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userName;
            T& operator()() { return userName; }
            const T& operator()() const { return userName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Phone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phone;
            T& operator()() { return phone; }
            const T& operator()() const { return phone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Num
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "num";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T num;
            T& operator()() { return num; }
            const T& operator()() const { return num; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct AppointTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appointTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appointTime;
            T& operator()() { return appointTime; }
            const T& operator()() const { return appointTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_of_day, sqlpp::tag::can_be_null>;
    };
    struct Userx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "userx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userx;
            T& operator()() { return userx; }
            const T& operator()() const { return userx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace Appoint_

  struct Appoint: sqlpp::table_t<Appoint,
               Appoint_::Id,
               Appoint_::UserName,
               Appoint_::Phone,
               Appoint_::Num,
               Appoint_::AppointTime,
               Appoint_::Userx>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "appoint";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T appoint;
        T& operator()() { return appoint; }
        const T& operator()() const { return appoint; }
      };
    };
  };
  namespace Foods_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Price
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "price";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T price;
            T& operator()() { return price; }
            const T& operator()() const { return price; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Img
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "img";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T img;
            T& operator()() { return img; }
            const T& operator()() const { return img; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Num
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "num";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T num;
            T& operator()() { return num; }
            const T& operator()() const { return num; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct EnName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "enName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T enName;
            T& operator()() { return enName; }
            const T& operator()() const { return enName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Status
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T status;
            T& operator()() { return status; }
            const T& operator()() const { return status; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Descx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "descx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T descx;
            T& operator()() { return descx; }
            const T& operator()() const { return descx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Tem
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tem";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tem;
            T& operator()() { return tem; }
            const T& operator()() const { return tem; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Size
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "size";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T size;
            T& operator()() { return size; }
            const T& operator()() const { return size; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace Foods_

  struct Foods: sqlpp::table_t<Foods,
               Foods_::Id,
               Foods_::Type,
               Foods_::Name,
               Foods_::Price,
               Foods_::Img,
               Foods_::Num,
               Foods_::EnName,
               Foods_::Status,
               Foods_::Descx,
               Foods_::Tem,
               Foods_::Size>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "foods";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T foods;
        T& operator()() { return foods; }
        const T& operator()() const { return foods; }
      };
    };
  };
  namespace Menu_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace Menu_

  struct Menu: sqlpp::table_t<Menu,
               Menu_::Id,
               Menu_::Type>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "menu";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T menu;
        T& operator()() { return menu; }
        const T& operator()() const { return menu; }
      };
    };
  };
  namespace Mycut_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Openid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "openid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T openid;
            T& operator()() { return openid; }
            const T& operator()() const { return openid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Reduction
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reduction";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reduction;
            T& operator()() { return reduction; }
            const T& operator()() const { return reduction; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Status
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T status;
            T& operator()() { return status; }
            const T& operator()() const { return status; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct GetTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "getTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T getTime;
            T& operator()() { return getTime; }
            const T& operator()() const { return getTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct UseTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "useTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T useTime;
            T& operator()() { return useTime; }
            const T& operator()() const { return useTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
  } // namespace Mycut_

  struct Mycut: sqlpp::table_t<Mycut,
               Mycut_::Id,
               Mycut_::Openid,
               Mycut_::Reduction,
               Mycut_::Status,
               Mycut_::GetTime,
               Mycut_::UseTime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "mycut";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T mycut;
        T& operator()() { return mycut; }
        const T& operator()() const { return mycut; }
      };
    };
  };
  namespace Orderx_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct OpenId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "openId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T openId;
            T& operator()() { return openId; }
            const T& operator()() const { return openId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct SumMoney
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sumMoney";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sumMoney;
            T& operator()() { return sumMoney; }
            const T& operator()() const { return sumMoney; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct CupNumber
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cupNumber";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cupNumber;
            T& operator()() { return cupNumber; }
            const T& operator()() const { return cupNumber; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct CartList
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cartList";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cartList;
            T& operator()() { return cartList; }
            const T& operator()() const { return cartList; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct OrderId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "orderId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T orderId;
            T& operator()() { return orderId; }
            const T& operator()() const { return orderId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct CathNumber
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cathNumber";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cathNumber;
            T& operator()() { return cathNumber; }
            const T& operator()() const { return cathNumber; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Model
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "model";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T model;
            T& operator()() { return model; }
            const T& operator()() const { return model; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct AppointTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appointTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appointTime;
            T& operator()() { return appointTime; }
            const T& operator()() const { return appointTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Status
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T status;
            T& operator()() { return status; }
            const T& operator()() const { return status; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct DisTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "disTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T disTime;
            T& operator()() { return disTime; }
            const T& operator()() const { return disTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct CutMonney
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cutMonney";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cutMonney;
            T& operator()() { return cutMonney; }
            const T& operator()() const { return cutMonney; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Packages
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "packages";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T packages;
            T& operator()() { return packages; }
            const T& operator()() const { return packages; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct CutText
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cutText";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cutText;
            T& operator()() { return cutText; }
            const T& operator()() const { return cutText; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Note
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "note";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T note;
            T& operator()() { return note; }
            const T& operator()() const { return note; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace Orderx_

  struct Orderx: sqlpp::table_t<Orderx,
               Orderx_::Id,
               Orderx_::OpenId,
               Orderx_::SumMoney,
               Orderx_::CupNumber,
               Orderx_::CartList,
               Orderx_::Time,
               Orderx_::OrderId,
               Orderx_::CathNumber,
               Orderx_::Model,
               Orderx_::AppointTime,
               Orderx_::Status,
               Orderx_::DisTime,
               Orderx_::CutMonney,
               Orderx_::Packages,
               Orderx_::CutText,
               Orderx_::Note>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "orderx";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T orderx;
        T& operator()() { return orderx; }
        const T& operator()() const { return orderx; }
      };
    };
  };
  namespace Reduction_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct TypeDes
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "typeDes";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T typeDes;
            T& operator()() { return typeDes; }
            const T& operator()() const { return typeDes; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Rule
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rule";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rule;
            T& operator()() { return rule; }
            const T& operator()() const { return rule; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Cut
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cut";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cut;
            T& operator()() { return cut; }
            const T& operator()() const { return cut; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct StartDate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "startDate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T startDate;
            T& operator()() { return startDate; }
            const T& operator()() const { return startDate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct EndDate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "endDate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T endDate;
            T& operator()() { return endDate; }
            const T& operator()() const { return endDate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct Status
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T status;
            T& operator()() { return status; }
            const T& operator()() const { return status; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Img
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "img";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T img;
            T& operator()() { return img; }
            const T& operator()() const { return img; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace Reduction_

  struct Reduction: sqlpp::table_t<Reduction,
               Reduction_::Id,
               Reduction_::Type,
               Reduction_::TypeDes,
               Reduction_::Rule,
               Reduction_::Cut,
               Reduction_::StartDate,
               Reduction_::EndDate,
               Reduction_::Status,
               Reduction_::Img>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "reduction";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T reduction;
        T& operator()() { return reduction; }
        const T& operator()() const { return reduction; }
      };
    };
  };
  namespace Shoptime_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Open
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "open";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T open;
            T& operator()() { return open; }
            const T& operator()() const { return open; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Close
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "close";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T close;
            T& operator()() { return close; }
            const T& operator()() const { return close; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Shoptime_

  struct Shoptime: sqlpp::table_t<Shoptime,
               Shoptime_::Id,
               Shoptime_::Open,
               Shoptime_::Close>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "shoptime";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T shoptime;
        T& operator()() { return shoptime; }
        const T& operator()() const { return shoptime; }
      };
    };
  };
  namespace Userx_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct NickName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "nickName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nickName;
            T& operator()() { return nickName; }
            const T& operator()() const { return nickName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct AvatarUrl
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "avatarUrl";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T avatarUrl;
            T& operator()() { return avatarUrl; }
            const T& operator()() const { return avatarUrl; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Password
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "password";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T password;
            T& operator()() { return password; }
            const T& operator()() const { return password; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Role
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "role";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T role;
            T& operator()() { return role; }
            const T& operator()() const { return role; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Root
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "root";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T root;
            T& operator()() { return root; }
            const T& operator()() const { return root; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Resum
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resum";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resum;
            T& operator()() { return resum; }
            const T& operator()() const { return resum; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Province
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "province";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T province;
            T& operator()() { return province; }
            const T& operator()() const { return province; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Gender
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gender";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gender;
            T& operator()() { return gender; }
            const T& operator()() const { return gender; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct City
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "city";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T city;
            T& operator()() { return city; }
            const T& operator()() const { return city; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct OpenId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "openId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T openId;
            T& operator()() { return openId; }
            const T& operator()() const { return openId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct CreateTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "create_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createTime;
            T& operator()() { return createTime; }
            const T& operator()() const { return createTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct LastLoginTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "last_loginTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastLoginTime;
            T& operator()() { return lastLoginTime; }
            const T& operator()() const { return lastLoginTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct Phone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "phone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phone;
            T& operator()() { return phone; }
            const T& operator()() const { return phone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace Userx_

  struct Userx: sqlpp::table_t<Userx,
               Userx_::Id,
               Userx_::NickName,
               Userx_::AvatarUrl,
               Userx_::Password,
               Userx_::Role,
               Userx_::Root,
               Userx_::Resum,
               Userx_::Province,
               Userx_::Gender,
               Userx_::City,
               Userx_::OpenId,
               Userx_::CreateTime,
               Userx_::LastLoginTime,
               Userx_::Phone>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "userx";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T userx;
        T& operator()() { return userx; }
        const T& operator()() const { return userx; }
      };
    };
  };
} // namespace orm
#endif
