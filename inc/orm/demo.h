// generated by ./ddl2cpp ./sql.sql demo orm
#ifndef ORM_DEMO_H
#define ORM_DEMO_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace orm
{
  namespace Student_
  {
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Age
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "age";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T age;
            T& operator()() { return age; }
            const T& operator()() const { return age; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Student_

  struct Student: sqlpp::table_t<Student,
               Student_::Name,
               Student_::Age>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "student";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T student;
        T& operator()() { return student; }
        const T& operator()() const { return student; }
      };
    };
  };
} // namespace orm
#endif
